name: Process Release Candidate

on:
  issues:
    types:
      - closed
      - labeled

env:
  GIT_REMOTE: origin

jobs:
  process-inputs:
    name: Process inputs
    runs-on: ubuntu-20.04

    outputs:
      target_version: ${{ steps.get_release_candidate_details.outputs.target_version }}
      release_candidate_branch: "release-candidate/${{ steps.get_release_candidate_details.outputs.target_version }}"

    steps:
      # Get target version from issue title
      # Title syntax: "Release Candidate: $VERSION from $BRANCH @ $SHA"
      - name: Get Release Candidate details
        # if: ${{ github.event.issue.user.login == 'github-actions' }}
        env:
          ISSUE_TITLE: ${{ github.event.issue.title }}
        run: |
          import os

          issue_title = os.environ['ISSUE_TITLE']
          issue_title_words = issue_title.split()

          assert issue_title.startswith('Release Candidate')
          assert len(issue_title_words) >= 2
          target_version = issue_title_words[2]

          print(f"::set-output name=target_version::{target_version}")
        shell: python
        id: get_release_candidate_details

      - name: Display Target Version
        run: echo ${{ steps.get_release_candidate_details.outputs.target_version }}

  process-approval:
    name: (if issue was labeled) Process approval
    runs-on: ubuntu-20.04
    if: ${{ github.event.action == 'labeled' && github.event.label.name == 'release-candidate/approved' && contains(github.event.issue.labels.*.name, 'release-candidate') }}
    # if: ${{ github.event.action == 'labeled' && github.event.label.name == inputs.release_candidate_approved_label && contains(github.event.issue.labels.*.name, inputs.release_candidate_label) }}

    needs:
      - process-inputs

    env:
      RELEASE_CANDIDATE_ISSUE_NUMBER: ${{ github.event.issue.number }}
      RELEASE_CANDIDATE_BRANCH: ${{ needs.process-inputs.outputs.release_candidate_branch }}
      RELEASE_CANDIDATE_TARGET_VERSION: ${{ needs.process-inputs.outputs.target_version }}

    steps:
      - name: Add Issue Comment
        uses: actions/github-script@v5
        env:
          ISSUE_COMMENT_BODY: >-
            This Release Candidate has been approved by @${{ github.event.sender.login }}.

            This action triggered a workflow that will finalize the Release.
            The progress of this task can be monitored here:
            [#${{ github.run_id }}](/${{ github.repository }}/actions/runs/${{ github.run_id }}).
        with:
          script: |
            const { ISSUE_COMMENT_BODY } = process.env
            const { RELEASE_CANDIDATE_ISSUE_NUMBER } = process.env

            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: `${RELEASE_CANDIDATE_ISSUE_NUMBER}`,
              body: `${ISSUE_COMMENT_BODY}`,
            })

      # TODO: Get the first comment in issue thread

      - name: Create a new GitHub Release
        uses: actions/github-script@v5
        env:
          RELEASE_BODY: ${{ github.event.issue.body }}
        with:
          script: |
            const { RELEASE_BODY } = process.env
            const { RELEASE_CANDIDATE_BRANCH } = process.env
            const { RELEASE_CANDIDATE_TARGET_VERSION } = process.env

            github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `${RELEASE_CANDIDATE_TARGET_VERSION}`,
              target_commitish: `${RELEASE_CANDIDATE_BRANCH}`,
              name: `${RELEASE_CANDIDATE_TARGET_VERSION}`,
              body: `${RELEASE_BODY}`,
            })

      - name: Close Release Candidate Issue
        uses: actions/github-script@v5
        with:
          script: |
            const { RELEASE_CANDIDATE_ISSUE_NUMBER } = process.env

            github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: `${RELEASE_CANDIDATE_ISSUE_NUMBER}`,
              state: 'closed',
            })

  remove-temporary-branch:
    name: (if issue was closed) Remove temporary branch
    runs-on: ubuntu-20.04
    if: ${{ github.event.action == 'closed' }}

    needs:
      - process-inputs

    env:
      RELEASE_CANDIDATE_BRANCH: ${{ needs.process-inputs.outputs.release_candidate_branch }}

    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ env.RELEASE_CANDIDATE_BRANCH }}

      - name: Delete Release Candidate Branch
        run: git push "${GIT_REMOTE}" --delete "${RELEASE_CANDIDATE_BRANCH}"

  # close-release-candidate:
  #   uses: mkochanowski/crucible/.github/workflows/releases/reusable/close-release-candidate.yml@main
  #   with:
  #     issue_id: issue_id
  #   secrets: inherit
