name: Create Release Candidate (reusable)

on:
  workflow_call:
    inputs:
      source_branch:
        description: 'Source Branch/Tag/SHA'
        type: 'string'
        required: true
        default: 'main'

      target_version:
        description: 'Target Version [syntax: v3.2.1]'
        type: 'string'
        required: true

      release_notes:
        description: 'Release Notes'
        type: 'string'
        required: true

env:
  RELEASE_CANDIDATE_BRANCH: "release-candidate/${{ inputs.target_version }}"
  RELEASE_CANDIDATE_SOURCE_BRANCH: ${{ inputs.source_branch }}
  RELEASE_CANDIDATE_TARGET_VERSION: ${{ inputs.target_version }}

  ARTIFACTS_VERSION_FILE_PATH: version.txt
  # ARTIFACTS_CHANGELOG_FILE_PATH: CHANGELOG.md

  ISSUE_LABELS_RELEASE_CANDIDATE: release-candidate
  ISSUE_LABELS_RELEASE_CANDIDATE_APPROVED: release-candidate/approved

  GIT_REPOSITORY_URL: "https://github.com/${{ github.repository }}"
  GIT_USER_NAME: github-actions[bot]
  GIT_USER_EMAIL: github-actions[bot]@users.noreply.github.com
  GIT_REMOTE: origin

jobs:
  create-release-candidate-branch:
    name: Create Release Candidate Branch
    runs-on: ubuntu-20.04

    outputs:
      # created_release_candidate_branch: ${{ steps.create_release_candidate_branch.outputs.branch_name }}
      source_branch_full_hash: ${{ steps.get_commit_hashes.outputs.full_hash }}
      source_branch_short_hash: ${{ steps.get_commit_hashes.outputs.short_hash }}

    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ env.RELEASE_CANDIDATE_SOURCE_BRANCH }}

      # Exit code 2 means that there are no remote refs of a given name
      # https://git-scm.com/docs/git-ls-remote.html
      # - name: Ensure that ${{ env.RELEASE_CANDIDATE_BRANCH }} does not already exist
      #   run: |
      #     git ls-remote --exit-code "${GIT_REPOSITORY_URL}" "${RELEASE_CANDIDATE_BRANCH}"
      #     [[ "$?" == "2" ]]

      - name: Get SHA of HEAD of the source branch
        run: |
          echo "::set-output name=full_hash::$(git rev-parse HEAD)"
          echo "::set-output name=short_hash::$(git rev-parse --short HEAD)"
        id: get_commit_hashes

      - name: Clone ${{ env.RELEASE_CANDIDATE_SOURCE_BRANCH }} to ${{ env.RELEASE_CANDIDATE_BRANCH }}
        run: |
          git checkout -b "${RELEASE_CANDIDATE_BRANCH}" "${RELEASE_CANDIDATE_SOURCE_BRANCH}"
          git push "${GIT_REMOTE}" "${RELEASE_CANDIDATE_BRANCH}"
        # echo "::set-output name=branch_name::${RELEASE_CANDIDATE_BRANCH}"
        # id: create_release_candidate_branch

      # TODO: Add Changelog to artifacts

      - name: (Update artifacts) Version file
        run: echo "${RELEASE_CANDIDATE_TARGET_VERSION}" > ${ARTIFACTS_VERSION_FILE_PATH}

      - name: Check the working tree for new changes
        run: |
          git add "${ARTIFACTS_VERSION_FILE_PATH}"
          git diff --exit-code
          echo "::set-output name=exit_code::$?"
        id: check_diff_of_working_tree
        continue-on-error: true

      - name: Commit and push artifacts
        if: ${{ steps.check_diff_of_working_tree.outputs.exit_code == 1 }}
        run: |
          git config user.name "${GIT_USER_NAME}"
          git config user.email "${GIT_USER_EMAIL}"

          git commit -m "Bump version to ${RELEASE_CANDIDATE_TARGET_VERSION}"

          git push "${GIT_REMOTE}" "${RELEASE_CANDIDATE_BRANCH}"

  create-release-candidate-issue:
    name: Create Release Candidate Issue
    runs-on: ubuntu-20.04
    needs:
      - create-release-candidate-branch

    outputs:
      opened_issue_number: ${{ steps.get_opened_issue.outputs.issue_number }}

    env:
      RELEASE_CANDIDATE_SOURCE_FULL_HASH: ${{ needs.create-release-candidate-branch.outputs.source_branch_full_hash }}
      RELEASE_CANDIDATE_SOURCE_SHORT_HASH: ${{ needs.create-release-candidate-branch.outputs.source_branch_short_hash }}

    steps:
      - name: Create Release Candidate Issue on GitHub
        uses: actions/github-script@v5
        env:
          ISSUE_TITLE: >-
            Release Candidate: ${{ env.RELEASE_CANDIDATE_TARGET_VERSION }}
            from ${{ env.RELEASE_CANDIDATE_SOURCE_BRANCH }} @ ${{ env.RELEASE_CANDIDATE_SOURCE_SHORT_HASH }}
          ISSUE_BODY: >
            ## Release Candidate Details

            Source SHA: ${{ env.RELEASE_CANDIDATE_SOURCE_FULL_HASH }}\n
            Temporary branch with release artifacts: `${{ env.RELEASE_CANDIDATE_BRANCH }}`\n
            Target version: `${{ env.RELEASE_CANDIDATE_TARGET_VERSION }}`\n

            ## Available Actions

            - **To modify the generated Release Notes:** Please edit the comment below.\n
            - **To approve this Release Candidate:** Please add a label `${{ env.ISSUE_LABELS_RELEASE_CANDIDATE_APPROVED }}`
            to this issue. Approving a Release Candidate triggers a CI job that crafts a new Release and closes the relevant issue automatically. Perform this step once you have finished testing and verifying the Release Candidate.\n
            - **To dismiss this Release Candidate:** Please close the issue. This will remove the temporary branch created for this Release Candidate (`${{ env.RELEASE_CANDIDATE_BRANCH }}`).\n"
          ISSUE_COMMENT_BODY: ${{ inputs.release_notes }}
        with:
          script: |
            const { ISSUE_TITLE } = process.env
            const { ISSUE_BODY } = process.env

            const result = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `${ISSUE_TITLE}`,
              body: `${ISSUE_BODY}`,
              labels: ['${{ env.ISSUE_LABELS_RELEASE_CANDIDATE }}'],
            })
            console.log(result)

            const issue_number = result.data.number
            core.exportVariable('OPENED_ISSUE_NUMBER', issue_number)

            const { ISSUE_COMMENT_BODY } = process.env

            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue_number,
              body: `${ISSUE_COMMENT_BODY}`,
            })

      - name: Save Issue Number
        run: echo "::set-output name=issue_number::${OPENED_ISSUE_NUMBER}"
        id: get_opened_issue
